// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STDMSGSSTRING_H_
#define FLATBUFFERS_GENERATED_STDMSGSSTRING_H_

#include "flatbuffers/flatbuffers.h"

struct StdMsgsString;
struct StdMsgsStringBuilder;
struct StdMsgsStringT;

struct StdMsgsStringT : public flatbuffers::NativeTable {
  typedef StdMsgsString TableType;
  std::string data;
  StdMsgsStringT() {
  }
};

struct StdMsgsString FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StdMsgsStringT NativeTableType;
  typedef StdMsgsStringBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
  StdMsgsStringT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StdMsgsStringT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<StdMsgsString> Pack(flatbuffers::FlatBufferBuilder &_fbb, const StdMsgsStringT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StdMsgsStringBuilder {
  typedef StdMsgsString Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(StdMsgsString::VT_DATA, data);
  }
  explicit StdMsgsStringBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StdMsgsStringBuilder &operator=(const StdMsgsStringBuilder &);
  flatbuffers::Offset<StdMsgsString> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StdMsgsString>(end);
    return o;
  }
};

inline flatbuffers::Offset<StdMsgsString> CreateStdMsgsString(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  StdMsgsStringBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<StdMsgsString> CreateStdMsgsStringDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return CreateStdMsgsString(
      _fbb,
      data__);
}

flatbuffers::Offset<StdMsgsString> CreateStdMsgsString(flatbuffers::FlatBufferBuilder &_fbb, const StdMsgsStringT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline StdMsgsStringT *StdMsgsString::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<StdMsgsStringT> _o = std::unique_ptr<StdMsgsStringT>(new StdMsgsStringT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void StdMsgsString::UnPackTo(StdMsgsStringT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) _o->data = _e->str(); }
}

inline flatbuffers::Offset<StdMsgsString> StdMsgsString::Pack(flatbuffers::FlatBufferBuilder &_fbb, const StdMsgsStringT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateStdMsgsString(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<StdMsgsString> CreateStdMsgsString(flatbuffers::FlatBufferBuilder &_fbb, const StdMsgsStringT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const StdMsgsStringT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.empty() ? 0 : _fbb.CreateString(_o->data);
  return CreateStdMsgsString(
      _fbb,
      _data);
}

inline const StdMsgsString *GetStdMsgsString(const void *buf) {
  return flatbuffers::GetRoot<StdMsgsString>(buf);
}

inline const StdMsgsString *GetSizePrefixedStdMsgsString(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<StdMsgsString>(buf);
}

inline bool VerifyStdMsgsStringBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<StdMsgsString>(nullptr);
}

inline bool VerifySizePrefixedStdMsgsStringBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<StdMsgsString>(nullptr);
}

inline void FinishStdMsgsStringBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<StdMsgsString> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStdMsgsStringBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<StdMsgsString> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<StdMsgsStringT> UnPackStdMsgsString(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<StdMsgsStringT>(GetStdMsgsString(buf)->UnPack(res));
}

inline std::unique_ptr<StdMsgsStringT> UnPackSizePrefixedStdMsgsString(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<StdMsgsStringT>(GetSizePrefixedStdMsgsString(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_STDMSGSSTRING_H_
